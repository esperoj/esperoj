"""
This type stub file was generated by pyright.
"""

HREF_REG = ...
LINK_REG_1 = ...
LINK_REG_2 = ...
IMAGE_REG_1 = ...
IMAGE_REG_2 = ...
LIMIT = ...
TEXT_COLOR = ...
DATE_FORMAT = ...
DATETIME_FORMAT = ...
FIRST_COLUMN_TYPES = ...
AIRTABLE_API_URL = ...
FILE = ...
IMAGE = ...

class LinksConvertor:
    def convert(self, column_name, link_data, airtable_rows):  # -> dict[str, Any]:
        ...
    def gen_links(self, column_name, link_data, airtable_rows):  # -> dict[str, Any]:
        ...

class FilesConvertor:
    def __init__(self, airtable_api_key, base) -> None: ...
    def upload_file(self, item, file_type):  # -> None:
        """file_type must in ['image', 'file']"""
        ...

    def batch_upload_files(self, value):  # -> list[Any]:
        ...
    def batch_upload_images(self, value):  # -> list[Any]:
        ...

class RowsConvertor:
    def __init__(self, files_convertor) -> None: ...
    def convert(self, columns, airtable_rows):  # -> list[Any]:
        ...
    def parse_date(self, value):  # -> str:
        ...
    def parse_image(self, value): ...
    def parse_file(self, value): ...
    def parse_single_select(self, value):  # -> str:
        ...
    def parse_multiple_select(self, value):  # -> list[Any] | list[str]:
        ...
    def parse_text(self, value):  # -> LiteralString | str:
        ...
    def parse_long_text(self, value):  # -> dict[str, Any]:
        ...
    def gen_cell_data(self, column_type, value): ...
    def gen_rows(self, columns, airtable_rows):  # -> list[Any]:
        ...

class ColumnsParser:
    """Airtable field types
    https://support.airtable.com/hc/en-us/articles/360055885353-Field-types-reference
    https://airtable.com/api/meta
    """
    def parse(self, link_map, table_name, airtable_rows):  # -> list[Any]:
        ...
    def parse_select(self, columns, airtable_rows):  # -> list[Any]:
        ...
    def random_color(self):  # -> str:
        ...
    def random_num_id(self):  # -> str:
        ...
    def get_value_map(self, airtable_rows):  # -> dict[Any, Any]:
        ...
    def get_select_options(self, select_list):  # -> list[dict[str, str]]:
        ...
    def get_column_data(
        self, link_map, table_name, column_name, column_type, values
    ):  # -> tuple[Any | Literal[ColumnTypes.TEXT, ColumnTypes.DATE, ColumnTypes.LINK, ColumnTypes.MULTIPLE_SELECT, ColumnTypes.COLLABORATOR], dict[str, str] | dict[str, Any] | dict[str, list[dict[str, str]]] | None]:
        ...
    def get_column_type(self, values): ...
    def gen_columns(self, link_map, table_name, value_map):  # -> list[Any]:
        ...
    def get_select_value_map(self, columns, airtable_rows):  # -> dict[Any, Any]:
        ...
    def gen_select_columns(self, select_value_map):  # -> list[Any]:
        ...

class AirtableAPI:
    def __init__(self, airtable_api_key, airtable_base_id) -> None: ...
    def __str__(self) -> str: ...
    def list_rows(self, table_name, offset=...):  # -> tuple[list[Any], Any]:
        ...
    def list_all_rows(self, table_name):  # -> list[Any]:
        ...

class AirtableConvertor:
    def __init__(
        self, airtable_api_key, airtable_base_id, base, table_names, first_columns=..., links=...
    ) -> None:
        """
        airtable_api_key: str
        airtable_base_id: str
        base: SeaTable Base
        table_names: list[str], eg: ['table_name1', 'table_name2']
        links: list[tuple], eg: [('table_name', 'column_name', 'other_table_name')]
        """
        ...

    def convert_metadata(self):  # -> None:
        ...
    def convert_data(self):  # -> None:
        ...
    def convert_tables(self):  # -> None:
        ...
    def convert_columns(self):  # -> None:
        ...
    def convert_rows(self, is_demo=...):  # -> None:
        ...
    def convert_links(self, is_demo=...):  # -> None:
        ...
    def delete_demo_rows(self):  # -> None:
        ...
    def convert_select_columns(self):  # -> None:
        ...
    def get_first_column_map(self):  # -> dict[Any, Any]:
        ...
    def get_link_map(self):  # -> dict[Any, Any]:
        ...
    def get_airtable_row_map(self, is_demo=...):  # -> dict[Any, Any]:
        ...
    def get_airtable_column_map(self):  # -> dict[Any, Any]:
        ...
    def get_table_map(self):  # -> dict[Any, Any]:
        ...
    def add_table(self, table_name, columns): ...
    def add_column(self, table_name, column_name, column_type, column_data):  # -> None:
        ...
    def add_column_options(self, table_name, column_name, options): ...
    def list_columns(self, table_name): ...
    def list_rows(self, table_name): ...
    def batch_delete_rows(self, table_name, row_ids):  # -> None:
        ...
    def batch_append_rows(self, table_name, rows):  # -> None:
        ...
    def batch_append_links(self, table_name, links):  # -> None:
        ...
