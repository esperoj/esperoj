"""
This type stub file was generated by pyright.
"""

from .constants import ColumnTypes

def parse_headers(token):  # -> dict[str, Any]:
    ...
def parse_server_url(server_url): ...
def parse_response(response):  # -> Any | None:
    ...
def like_table_id(value):  # -> Match[str] | None:
    ...
def check_auth(func):  # -> Callable[..., Any]:
    ...

class SeaTableAPI:
    """SeaTable API"""
    def __init__(self, token, server_url) -> None:
        """
        :param token: str
        :param server_url: str
        """
        ...

    def __str__(self) -> str: ...
    def auth(self, with_socket_io=...):  # -> None:
        """Auth to SeaTable"""
        ...

    @check_auth
    def send_email(self, account_name, msg, **kwargs):  # -> None:
        ...
    @check_auth
    def send_wechat_msg(self, account_name, msg):  # -> None:
        ...
    @check_auth
    def get_metadata(self):  # -> Any:
        """
        :return: dict
        """
        ...

    @check_auth
    def list_tables(self):  # -> Any | list[Any]:
        ...
    @check_auth
    def get_table_by_name(self, table_name):  # -> Any | None:
        ...
    @check_auth
    def add_table(self, table_name, lang=..., columns=...):  # -> Any | None:
        """
        :param table_name: str
        :param lang: str, currently 'en' for English, and 'zh-cn' for Chinese
        :param columns: list
        """
        ...

    @check_auth
    def rename_table(self, table_name, new_table_name):  # -> Any | None:
        ...
    @check_auth
    def delete_table(self, table_name):  # -> Any | None:
        ...
    @check_auth
    def list_views(self, table_name):  # -> Any | None:
        ...
    @check_auth
    def get_view_by_name(self, table_name, view_name):  # -> Any | None:
        ...
    @check_auth
    def add_view(self, table_name, view_name):  # -> Any | None:
        ...
    @check_auth
    def rename_view(self, table_name, view_name, new_view_name):  # -> Any | None:
        ...
    @check_auth
    def delete_view(self, table_name, view_name):  # -> Any | None:
        ...
    @check_auth
    def list_rows(
        self, table_name, view_name=..., order_by=..., desc=..., start=..., limit=...
    ):  # -> Any:
        """
        :param table_name: str
        :param view_name: str
        :param order_by: str
        :param desc: boolean
        :param start: int
        :param limit: int
        :return: list
        """
        ...

    @check_auth
    def get_row(self, table_name, row_id):  # -> Any | None:
        """
        :param table_name: str
        :param row_id: str
        :return: dict
        """
        ...

    @check_auth
    def append_row(self, table_name, row_data):  # -> Any | None:
        """
        :param table_name: str
        :param row_data: dict
        """
        ...

    @check_auth
    def batch_append_rows(self, table_name, rows_data):  # -> Any | None:
        """
        :param table_name: str
        :param rows_data: dict
        """
        ...

    @check_auth
    def insert_row(self, table_name, row_data, anchor_row_id):  # -> Any | None:
        """
        :param table_name: str
        :param row_data: dict
        :param anchor_row_id: str
        """
        ...

    @check_auth
    def update_row(self, table_name, row_id, row_data):  # -> Any | None:
        """
        :param table_name: str
        :param row_id: str
        :param row_data: dict
        """
        ...

    @check_auth
    def batch_update_rows(self, table_name, rows_data):  # -> Any | None:
        """
        :param table_name: str
        :param rows_data: list
        :return:
        """
        ...

    @check_auth
    def delete_row(self, table_name, row_id):  # -> Any | None:
        """
        :param table_name: str
        :param row_id: str
        """
        ...

    @check_auth
    def batch_delete_rows(self, table_name, row_ids):  # -> Any | None:
        """
        :param table_name: str
        :param row_ids: list
        """
        ...

    @check_auth
    def filter_rows(self, table_name, filters, view_name=..., filter_conjunction=...):  # -> Any:
        """
        :param table_name: str
        :param view_name: str
        :param filters: list
        :param filter_conjunction: str, 'And' or 'Or'
        :return: list
        """
        ...

    @check_auth
    def get_file_download_link(self, path):  # -> Any:
        """
        :param path: str
        :return: str
        """
        ...

    @check_auth
    def get_file_upload_link(self):  # -> Any | None:
        """
        :return: dict
        """
        ...

    @check_auth
    def add_link(
        self, link_id, table_name, other_table_name, row_id, other_row_id
    ):  # -> Any | None:
        """
        :param link_id: str
        :param table_name: str
        :param other_table_name: str
        :param row_id: str
        :param other_row_id: str
        """
        ...

    @check_auth
    def remove_link(
        self, link_id, table_name, other_table_name, row_id, other_row_id
    ):  # -> Any | None:
        """
        :param link_id: str
        :param table_name: str
        :param other_table_name: str
        :param row_id: str
        :param other_row_id: str
        """
        ...

    @check_auth
    def update_link(
        self, link_id, table_name, other_table_name, row_id, other_rows_ids
    ):  # -> Any | None:
        """
        :param link_id: str
        :param table_name: str
        :param other_table_name: str
        :param row_id: str
        :param other_rows_ids: list
        """
        ...

    @check_auth
    def batch_update_links(
        self, link_id, table_name, other_table_name, row_id_list, other_rows_ids_map
    ):  # -> Any | None:
        """
        :param link_id: str
        :param table_name: str
        :param other_table_name: str
        :param row_id_list: []
        :param other_rows_ids_map: dict
        """
        ...

    @check_auth
    def get_linked_records(self, table_id, link_column_key, rows):  # -> Any | None:
        """
        :param table_id:  str
        :param link_column_key: str
        :param rows: list
        """
        ...

    @check_auth
    def list_columns(self, table_name, view_name=...):  # -> Any:
        """
        :param table_name: str
        :param view_name: str
        :return: list
        """
        ...

    @check_auth
    def get_column_link_id(self, table_name, column_name):  # -> Any:
        ...
    @check_auth
    def get_column_by_name(self, table_name, column_name):  # -> Any | None:
        ...
    @check_auth
    def get_columns_by_type(self, table_name, column_type: ColumnTypes):  # -> list[Any]:
        ...
    @check_auth
    def insert_column(
        self, table_name, column_name, column_type, column_key=..., column_data=...
    ):  # -> Any | None:
        """
        :param table_name: str
        :param column_name: str
        :param column_type: ColumnType enum
        :param column_key: str, which you want to insert after
        :param column_data: dict, config information of column
        :return: dict
        """
        ...

    @check_auth
    def rename_column(self, table_name, column_key, new_column_name):  # -> Any | None:
        """
        :param table_name: str
        :param column_key: str
        :param new_column_name: str
        :return: dict
        """
        ...

    @check_auth
    def resize_column(self, table_name, column_key, new_column_width):  # -> Any | None:
        """
        :param table_name: str
        :param column_key: str
        :param old_column_width: int
        :param new_column_width: int
        :return: dict
        """
        ...

    @check_auth
    def freeze_column(self, table_name, column_key, frozen):  # -> Any | None:
        """
        :param table_name: str
        :param column_key: str
        :param frozen: bool
        :return: dict
        """
        ...

    @check_auth
    def move_column(self, table_name, column_key, target_column_key):  # -> Any | None:
        """
        :param table_name: str
        :param column_key: str
        :param target_column_key: bool
        :return: dict
        """
        ...

    @check_auth
    def modify_column_type(self, table_name, column_key, new_column_type):  # -> Any | None:
        """
        :param table_name: str
        :param column_key: str
        :param new_column_type: str
        :return: dict
        """
        ...

    @check_auth
    def add_column_options(self, table_name, column, options):  # -> Any | None:
        """
        :param table_name: str
        :param column: str
        :param options: list
        """
        ...

    @check_auth
    def add_column_cascade_settings(
        self, table_name, child_column, parent_column, cascade_settings
    ):  # -> Any | None:
        """

        :param table_name:  str
        :param child_column: str
        :param parent_column: str
        :param cascade_settings: dict
        :return:
        """
        ...

    @check_auth
    def delete_column(self, table_name, column_key):  # -> Any | None:
        """
        :param table_name: str
        :param column_key: str
        :return: None
        """
        ...

    @check_auth
    def download_file(self, url, save_path):  # -> None:
        ...
    @check_auth
    def upload_bytes_file(
        self, name, content: bytes, relative_path=..., file_type=..., replace=...
    ):  # -> dict[str, Any]:
        """
        relative_path: relative path for upload, if None, default {file_type}s/{date of this month} eg: files/2020-09
        file_type: if relative is None, file type must in ['image', 'file'], default 'file'
        return: info dict of uploaded file
        """
        ...

    @check_auth
    def upload_local_file(
        self, file_path, name=..., relative_path=..., file_type=..., replace=...
    ):  # -> dict[str, Any]:
        """
        relative_path: relative path for upload, if None, default {file_type}s/{date of today}, eg: files/2020-09
        file_type: if relative is None, file type must in ['image', 'file'], default 'file'
        return: info dict of uploaded file
        """
        ...

    @check_auth
    def filter(self, table_name, conditions=..., view_name=...):  # -> QuerySet:
        """
        :param table_name: str
        :param conditions: str
        :return: queryset
        """
        ...

    @check_auth
    def query(self, sql, convert=...):  # -> Any:
        """
        :param sql: str
        :param convert: bool
        :return: list
        """
        ...

    @check_auth
    def get_related_users(self):  # -> Any:
        ...
    @check_auth
    def send_toast_notification(self, username, msg, toast_type=...):  # -> None:
        ...
    @check_auth
    def add_workflow_task(
        self, workflow_token, row_data, initiator=..., link_rows=..., new_linked_rows=...
    ):  # -> Any:
        ...
    @check_auth
    def add_workflow_task_with_existed_row(self, workflow_token, row_id, initiator=...):  # -> Any:
        ...
    @check_auth
    def big_data_insert_rows(self, table_name, rows_data):  # -> Any | None:
        ...
    @check_auth
    def get_custom_file_download_link(self, path):  # -> Any:
        """
        :param path: str
        :return: str
        """
        ...

    @check_auth
    def get_custom_file_upload_link(self, path):  # -> Any | None:
        ...
    @check_auth
    def download_custom_file(self, path, save_path):  # -> None:
        ...
    @check_auth
    def upload_local_file_to_custom_folder(
        self, local_path, custom_folder_path=..., name=...
    ):  # -> dict[str, Any]:
        ...
    @check_auth
    def get_custom_file_info(self, path, name):  # -> dict[str, Any]:
        ...
    @check_auth
    def list_custom_assets(self, path):  # -> Any | None:
        ...
    @check_auth
    def get_user_info(self, username):  # -> Any | None:
        ...

class Account:
    def __init__(self, login_name, password, server_url) -> None: ...
    def __str__(self) -> str: ...
    @property
    def token_headers(self):  # -> dict[str, str]:
        ...
    def auth(self):  # -> None:
        ...
    def load_account_info(self):  # -> None:
        ...
    def list_workspaces(self):  # -> Any | None:
        ...
    def add_base(self, name, workspace_id=...):  # -> Any:
        ...
    def copy_base(self, src_workspace_id, base_name, dst_workspace_id):  # -> Any:
        ...
    def get_base(self, workspace_id, base_name, with_socket_io=...):  # -> SeaTableAPI:
        ...
