"""
This type stub file was generated by pyright.
"""

class Lexer:
    def __init__(self) -> None: ...

    tokens = ...
    reserved = ...
    t_LBORDER = ...
    t_RBORDER = ...
    t_EQUAL = ...
    t_NOT_EQUAL = ...
    t_GTE = ...
    t_GT = ...
    t_LTE = ...
    t_LT = ...
    def t_QUOTE_STRING(self, t):
        r"'([^']*)'"
        ...

    def t_STRING(self, t):
        r"[^=|!|>|<|/(|/)|\s]+"
        ...

    def t_newline(self, t):  # -> None:
        r"\n+"
        ...

    t_ignore = ...
    def t_error(self, t): ...

class ConditionsParser:
    def __init__(self) -> None: ...
    def parse(self, raw_rows, raw_columns, conditions): ...

    tokens = ...
    def p_merge(self, p):  # -> None:
        """merge : filter AND filter
        | filter OR filter
        | merge AND filter
        | merge OR filter
        | filter
        """
        ...

    def p_filter(self, p):  # -> None:
        """filter : factor EQUAL factor
        | factor NOT_EQUAL factor
        | factor GTE factor
        | factor GT factor
        | factor LTE factor
        | factor LT factor
        | factor LIKE factor
        """
        ...

    def p_factor(self, p):  # -> None:
        """factor : QUOTE_STRING
        | STRING
        """
        ...

    def p_error(self, p): ...

class QuerySet:
    def __init__(self, base, table_name) -> None: ...
    def __str__(self) -> str: ...
    def __iter__(self):  # -> Iterator[Any]:
        ...
    def __len__(self):  # -> int:
        ...
    def __getitem__(self, index): ...
    def __bool__(self):  # -> bool:
        ...
    def filter(self, conditions=...):  # -> Self:
        """Performs the query and returns a new QuerySet instance.
        :param conditions: str
        :return: queryset
        """
        ...

    def get(self, conditions=...):  # -> None:
        """Performs the query and returns a single row matching the given keyword arguments.
        :param conditions: str
        :return row: dict
        """
        ...

    def all(self):  # -> Self:
        """Returns a new QuerySet that is a copy of the current one.
        :return: queryset
        """
        ...

    def update(self, row_data):  # -> list[Any]:
        """Updates all elements in the current QuerySet, setting all the given fields to the appropriate values.
        :param row_data: dict
        :return rows: list
        """
        ...

    def delete(self):  # -> int:
        """Deletes the rows in the current QuerySet.
        :return: int
        """
        ...

    def first(self):  # -> None:
        """Returns the first object of a query, returns None if no match is found.
        :return row: dict
        """
        ...

    def last(self):  # -> None:
        """Returns the last object of a query, returns None if no match is found.
        :return row: dict
        """
        ...

    def count(self):  # -> int:
        """Returns the number of rows as an integer.
        :return: int
        """
        ...

    def exists(self):  # -> bool:
        ...
