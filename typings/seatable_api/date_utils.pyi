"""
This type stub file was generated by pyright.
"""

DATETIME_FORMAT = ...

class DateQuarter:
    _year = ...
    _quarter = ...
    def __init__(self, year, quarter) -> None: ...
    @classmethod
    def from_date(cls, date):  # -> Self:
        ...
    def __repr__(self):  # -> str:
        ...
    def __gt__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    def __contains__(self, item):  # -> bool:
        ...
    def __eq__(self, other) -> bool: ...
    def __ge__(self, other) -> bool: ...
    def __le__(self, other) -> bool: ...
    def __getitem__(self, item):  # -> int:
        ...
    def __add__(self, other):  # -> DateQuarter:
        ...
    def __sub__(self, other):  # -> DateQuarter | int:
        ...
    @property
    def year(self):  # -> int:
        ...
    @property
    def quarter(self):  # -> int:
        ...
    def days(self):  # -> Generator[date, Any, None]:
        ...
    @property
    def start_date(self):  # -> date:
        ...
    @property
    def end_date(self):  # -> date:
        ...
    @classmethod
    def between(cls, start, end, include_last=...):  # -> Generator[Any, Any, None]:
        ...

class DateUtils:
    def date(self, year, month, day, *args):  # -> str:
        """
        ex: date(2021, 1, 1) = 2021-01-01
        :return: iso format of a date
        """
        ...

    def dateadd(self, date_str, count, unit=...):  # -> str:
        ...
    def datediff(self, start, end, unit=...):  # -> int | None:
        ...
    def eomonth(self, time_str, months=...):  # -> str:
        """
        return the last day of the next/last month of given time
        :param time_str:
        :param direction:
        :return:
        """
        ...

    def day(self, time_str):  # -> int:
        ...
    def days(self, time_start, time_end):  # -> int:
        """
        return the interval of two given date by days
        """
        ...

    def hour(self, time_str):  # -> int:
        ...
    def hours(self, time_start, time_end):  # -> int | None:
        """
        return the interval of two given date by hours
        """
        ...

    def minute(self, time_str):  # -> int:
        ...
    def month(self, time_str):  # -> int:
        ...
    def months(self, time_start, time_end):  # -> int | None:
        """
        return the interval of two given date by months
        """
        ...

    def second(self, time_str):  # -> int:
        ...
    def now(self):  # -> str:
        ...
    def today(self):  # -> str:
        ...
    def year(self, time_str):  # -> int:
        ...
    def weekday(self, time_str):  # -> int:
        """
        return the number of a day in a week, Monday=0, Tue=1, ..., Sun=6
        :param time_str:
        :return:
        """
        ...

    def isoweekday(self, time_str):  # -> int:
        """
        return the iso number of a day in a week, Mon=1, Tue=2, ..., Sun=7
        """
        ...

    def weeknum(self, time_str):  # -> int:
        """
        return the week number in a year by defining the first week contains the first
        week of a year, xxxx-01-01
        """
        ...

    def isoweeknum(self, time_str):  # -> int:
        """
        return the week number by the definition of ISO datetime scheme
        """
        ...

    def isomonth(self, time_str):  # -> str:
        ...
    def quarter_from_yq(self, year, quarter):  # -> DateQuarter:
        ...
    def quarter_from_ym(self, year, month):  # -> DateQuarter:
        ...
    def to_quarter(self, time_str):  # -> DateQuarter:
        ...
    def quarters_within(
        self, time_start, time_end, include_last=...
    ):  # -> Generator[Any, Any, None]:
        ...

dateutils = ...
